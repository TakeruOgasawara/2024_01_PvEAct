//======================================================================================
//
// ロックオン処理[lockOn.cpp]
// Author : Takeru Ogasawara
//
//======================================================================================
#include "lockOn.h"
#include "manager.h"
#include "renderer.h"
#include "texture.h"
#include "billboard.h"

//マクロ定義
#define SIZE_X			(20.0f)
#define SIZE_Y			(20.0f)

//======================================================================================
// コンストラクタ
//======================================================================================
CLockon::CLockon()
{

}

//======================================================================================
// デストラクタ
//======================================================================================
CLockon::~CLockon()
{

}

//======================================================================================
// 生成
//======================================================================================
CLockon* CLockon::Create(D3DXVECTOR3 pos)
{
	CLockon* pPause = nullptr;

	pPause = new CLockon;

	if (pPause != nullptr)
	{
		pPause->Init(pos);

		return pPause;
	}

	return pPause;
}

//======================================================================================
// 生成
//======================================================================================
CLockon* CLockon::Create(const char* cTexPath, D3DXVECTOR3 pos)
{
	CLockon* pPause = nullptr;

	pPause = new CLockon;

	if (pPause != nullptr)
	{
		pPause->Init(cTexPath, pos);

		return pPause;
	}

	return pPause;
}

//======================================================================================
// 初期化処理
//======================================================================================
HRESULT CLockon::Init()
{
	// 親クラスの初期化
	CBillboard::Init();

	return S_OK;
}

//======================================================================================
// 初期化処理
//======================================================================================
HRESULT CLockon::Init(D3DXVECTOR3 pos)
{
	// 生成
	CBillboard::Init();

	// 位置の設定
	SetPosition(pos);

	// テクスチャの割り当て
	BindTexture(CTexture::GetInstance()->Regist("data\\TEXTURE\\point.png"));

	return S_OK;
}

//======================================================================================
// 初期化処理(オーバーロード)
//======================================================================================
HRESULT CLockon::Init(const char* cTexPath, D3DXVECTOR3 pos)
{
	// 生成
	CBillboard::Init();

	// 位置の設定
	SetPosition(pos);

	// テクスチャの割り当て
	BindTexture(CTexture::GetInstance()->Regist(cTexPath));

	return S_OK;
}

//======================================================================================
// 終了処理
//======================================================================================
void CLockon::Uninit()
{
	CBillboard::Uninit();
}

//======================================================================================
// 更新処理
//======================================================================================
void CLockon::Update()
{
	// 親クラスの更新
	CBillboard::Update();
}

//======================================================================================
// 描画処理
//======================================================================================
void CLockon::Draw()
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetInstance()->GetRenderer()->GetDevice();

	// ライティングの有効/無効の設定
	pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	// 親クラスの描画
	CBillboard::Draw();

	// ライティングの有効/無効の設定
	pDevice->SetRenderState(D3DRS_LIGHTING, TRUE);
}